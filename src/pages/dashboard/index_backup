import { useEffect, useState, useRef } from "react";
import { CiTrash } from "react-icons/ci";
import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.scss";

const Home = () => {
    const productNameRef = useRef();
    const productIDToDeleteRef = useRef();
    const productIDToUpdateRef = useRef();
    const productNameToUpdateRef = useRef();
    const [products, setProducts] = useState([]);
    const [updated, setUpdated] = useState(false);
    const [updatedError, setUpdatedError] = useState(false);
    const [created, setCreated] = useState(false);
    const [deleted, setDeleted] = useState(false);
    const [deletedError, setDeletedError] = useState(false);

    const addProduct = async () => {
        const productName = productNameRef.current.value.trim();
        if (productName.length < 3) return;
        const postData = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                productName: productName,
            }),
        };
        if (productName.length < 3) return;
        const res = await fetch(
            `${process.env.NEXT_PUBLIC_URL}/api/products`,
            postData
        );
        const response = await res.json();
        console.log(response);
        if (response.response.message !== "success") return;
        const newproduct = response.response.product;

        setProducts([
            ...products,
            {
                productId: newproduct.productId,
                productName: newproduct.productName,
            },
        ]);
        setCreated(true);
    }

     const getProducts = async () => {
        const postData = {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        };
        const res = await fetch(
            `${process.env.NEXT_PUBLIC_URL}/api/products`,
            postData
        );
        const response = await res.json();
        setProducts(response.products);
        console.log(response);
    }

     const deleteProduct = async (id) => {
        if (!id) return;
        const postData = {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                productId: id,
            }),
        };
        const res = await fetch(
            `${process.env.NEXT_PUBLIC_URL}/api/products`,
            postData
        );
        const response = await res.json();
        console.log(response.response);
        if (response.response.message === "error") return setDeletedError(true);
        const idToRemove = parseFloat(response.response.product_id);
        setProducts(products.filter((a) => a.productId !== idToRemove));
        setDeleted(true);
    }

     const updateProduct = async () => {
        const productIDToUpdate = productIDToUpdateRef.current.value.trim();
        const productNameToUpdate = productNameToUpdateRef.current.value.trim();
        if (!productIDToUpdate.length) return;
        const postData = {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                productId: productIDToUpdate,
                productName: productNameToUpdate,
            }),
        };
        const res = await fetch(
            `${process.env.NEXT_PUBLIC_URL}/api/products`,
            postData
        );
        const response = await res.json();
        if (response.response.message === "error") return setUpdatedError(true);
        // if (response.response.message !== "success") return;
        const productIdUpdated = parseFloat(response.response.product.productId);
        const productUpdatedName = response.response.product.productName;
        //updating state
        const productsStateAfterUpdate = products.map((product) => {
            if (product.productId === productIdUpdated) {
                const productUpdated = {
                    ...product,
                    productName: productUpdatedName,
                };
                return productUpdated;
            } else {
                return {
                    ...product,
                };
            }
        });
        setUpdated(true);
        setProducts(productsStateAfterUpdate);
    }

    useEffect(() => {
        getProducts();
    }, []);

    return (
        <>
            {" "}
            <Head>
                <title>CRUD With Next.Js & MySQL Demo</title>
            </Head>
            <div className={styles.container}>
                <section className={styles.main}>
                    <h1>CRUD With Next.Js & MySQL Demo</h1>

                    <div className={styles.heading}>
                        <a href="/api/products" target="_blank" rel="noreferrer">
                            Database API data
                        </a>
                    </div>
                </section>
                <section>
                    <div className={styles.read}>
                        <h2>Read</h2>
                        <div className={styles.products}>
                            {products.map((item, index) => {
                                return (
                                    <div key={item.productId} className={styles.product}>
                                        <span>Product Id</span>: {item.productId} <br />{" "}
                                        <span>Product Name</span>: {item.productName}{" "}
                                        <CiTrash
                                            className={styles.icons}
                                            onClick={() => deleteProduct(item.product_id)}
                                        />
                                    </div>
                                );
                            })}
                            {!products.length ? <>No products found</> : null}
                        </div>
                    </div>
                </section>
                <section>
                    <div className={styles.create}>
                        <h2>Create</h2>
                        <div className={styles.input}>
                            <div className={styles.label}>Product Name</div>
                            <input type="text" ref={productNameRef} />
                        </div>
                        {created ? <div className={styles.success}>Success!</div> : null}
                        <div className={styles.buttonarea}>
                            <input
                                className={styles.button}
                                value="Save"
                                type="button"
                                onClick={addProduct}
                            />
                        </div>
                    </div>
                </section>
                <section>
                    <div className={styles.update}>
                        <h2>Update</h2>
                        <div className={styles.input}>
                            <div className={styles.label}>Product Id</div>
                            <input type="text" ref={productIDToUpdateRef} />
                        </div>
                        <div className={styles.input}>
                            <div className={styles.label}>Product Name</div>
                            <input type="text" ref={productNameToUpdateRef} />
                        </div>
                        {updated ? <div className={styles.success}>Success!</div> : null}
                        {updatedError ? <div className={styles.error}>Error!</div> : null}
                        <div className={styles.buttonarea}>
                            <input
                                className={styles.button}
                                value="Update"
                                type="button"
                                onClick={updateProduct}
                            />
                        </div>
                    </div>
                </section>
                <section>
                    <div className={styles.delete}>
                        <h2>Delete</h2>
                        <div className={styles.input}>
                            <div className={styles.label}>Product Id</div>
                            <input type="text" ref={productIDToDeleteRef} />
                        </div>
                        {deleted ? <div className={styles.success}>Success!</div> : null}
                        {deletedError ? <div className={styles.error}>Error!</div> : null}
                        <div className={styles.buttonarea}>
                            <input
                                className={`${styles.button} ${styles.warning}`}
                                value="Delete"
                                type="button"
                                onClick={() =>
                                    deleteProduct(productIDToDeleteRef.current.value)
                                }
                            />
                        </div>
                    </div>
                </section>
                <footer>
                    <p>
                        Create, Read, Update, Delete database data in React, Node and
                        Next.JS by Kiwi{" "}
                        <a
                            href="https://github.com/kiwizu3"
                            target="_blank"
                            rel="noreferrer"
                        >
                            GitHub
                        </a>
                    </p>
                </footer>
            </div>
        </>
    );
}

export default Home;
